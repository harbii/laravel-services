<?php

namespace DummyNamespace;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\JsonEncodingException;

class DummyClass extends Model {

	use SoftDeletes ;

    protected $table = 'DummyClass';

	/**
	 * The attributes that are mass assignable.
	 *
	 * @var array
	 */
	protected $fillable = [
		'user_id'		,
		'name'			,
		'description'	,
		'active'		,
		'deleted_at'	,
		'created_at'	,
		'updated_at'	,
	];

	/**
	 * The attributes that should be hidden for arrays.
	 *
	 * @var array
	 */
	protected $hidden = [
		//
	];

	/**
	 * The accessors to append to the model's array form.
	 *
	 * @var array
	 */
	protected $appends = [
        'created_at_diffForHumans',
	];

	/**
	 * The attributes that should be mutated to dates.
	 *
	 * @var array
	 */
	protected $dates = [
		'created_at' ,
		'updated_at',
		'deleted_at',
	];

	/**
	 * The attributes that should be cast to native types.
	 *
	 * @var array
	 */
	protected $casts = [
		'name'			=> 'string'		,
		'description'	=> 'string'		,
		'active'		=> 'boolean'	,
		'created_at'	=> 'datetime'	,
		'updated_at'	=> 'datetime'	,
		'deleted_at'	=> 'datetime'	,
	];

    public function user ( $value ) {
        return $this -> belongsTo( User::class , 'user_id' ) -> get( ) [ 0 ] ;
    }

    public function getcreatedAtDiffForHumansAttribute ( $value ) {
        return $this -> created_at -> diffForHumans( ) ;
    }

	public function scopeNotDelete( $query ){
		return $query -> where( 'deleted_at' , `NULL` );
	}

	public function scopeActive( $query ){
		return $query -> where( 'active' , 1 );
	}

	public function scopeConditions( $query ){
		return $this
			-> NotDelete( )
			-> Active( )
		;
	}

    /**
     * Convert the model instance to an array.
     *
     * @return array
     */
    public function toArray( ) {
        return array_merge( $this -> attributesToArray( ) , $this -> relationsToArray( ) ) ;
    }

    /**
     * Convert the model instance to JSON.
     *
     * @param  int  $options
     * @return string
     *
     * @throws \Illuminate\Database\Eloquent\JsonEncodingException
     */
    public function toJson( $options = 0 ) {
        $json = json_encode( $this -> jsonSerialize( ) , $options );

        if (JSON_ERROR_NONE !== json_last_error( ) ) throw JsonEncodingException::forModel( $this , json_last_error_msg( ) ) ;

        return $json;
    }

    /**
     * Convert the object into something JSON serializable.
     *
     * @return array
     */
    public function jsonSerialize( ) {
        return $this -> toArray( );
    }

    /**
     * Get all of the models from the database.
     *
     * @param  array|mixed  $columns
     * @return \Illuminate\Database\Eloquent\Collection|static[]
     */
    public static function all( $columns = [ '*' ] ) {
        return static::query() -> get( is_array( $columns ) ? $columns : func_get_args( ) );
    }

}
