<?php 

namespace DummyNamespace ;

use harby\services\Eloquent\service;
use Illuminate\Support\Facades\Event;

use Auth;
use App\Models\DummyClass;
use App\Requests\DummyClassRequest;

class DummyClassServices extends service {

	public function getRequest( ) { return new DummyClassRequest( ); }

	public function getEvents( ){ }

	public function store( $form ) {

		$validator = $this -> validRequest( $form , 'store' );

		if ( ! $validator -> check ) return $validator ;
		else $sanitize = $validator -> body ;

		//Event::fire( 'DummyClass.store.before' );

		$sanitize [ 'user_id' ] = Auth::user( ) -> id ;

		$create = DummyClass::create( $sanitize );

		//Event::fire( 'DummyClass.store.after' , $create -> toArray( )	);

		$this -> title	= 'DummyClass store was successful'	;
		$this -> message= __( 'DummyClass.Created' )		;
		$this -> body	= $create -> toArray( )				;

		return $this -> response( );

	}

	public function update( $form , $DummyClass ) {

		$validator = $this -> validRequest( $form , 'update' );

		if ( ! $validator -> check ) return $validator ;
		else $sanitize = $validator -> body ;

		//Event::fire( 'DummyClass.update.before' );

		$sanitize [ 'user_id'	] = Auth::user( ) -> id		;
		$sanitize [ 'update_at' ] = date( 'Y-m-d H:i:s' )	;

		$update = $DummyClass -> update( $sanitize );

		//Event::fire( 'DummyClass.update.after', $update -> toArray( ) );

		$this -> title	= 'update successful'			;
		$this -> message= __( 'DummyClass.successful' )	;
		$this -> body	= $update -> toArray( )			;

		return $this -> response( );

	}

	public function destroy( $id ) {

		$validator = $this -> validRequest( $form , 'destroy' );

		if ( ! $validator -> check ) return $validator ;
		else $sanitize = $validator -> body ;

		Event::fire( 'DummyClass.destroy.before' );

		$destroy = DummyClassModel::find( $id ) -> SoftDeletes(  );

		Event::fire( 'DummyClass.destroy.after', $destroy );

		$this -> title	= 'destroy successful' ;
		$this -> message= __( 'destroy successful' );
		$this -> body	= $destroy ;

		return $this -> response( );

	}

}


