<?php 

namespace DummyNamespace ;

use harby\services\Eloquent\service;

use DummyRootNamespaceHttp\Model\DummyClassModel;
use DummyRootNamespaceHttp\Request\DummyClassRequest;
use Illuminate\Support\Facades\Event;

class DummyClassService extends service{

	public function getRequest( ) {
		return new DummyClassRequest( );
	}

	public function getEvents( ){ }

	public function store( Request $request ) {

		$validator = $this -> validRequest( $request -> all( ) , $this -> getRequest( ) -> store( ) -> rules( ) );

		if ( ! $validator -> check ) return $validator ;
		else $sanitize = $validator -> body ;

		Event::fire('DummyClass.store.before' );

		$create = DummyClassModel::create( $sanitize );

		Event::fire('DummyClass.store.after', $create);

		$this -> code	= 200	;
		$this -> check	= true	;
		$this -> title	= 'store successful' ;
		$this -> message= __( 'store successful' );
		$this -> body	= $create ;

		return $this -> response( );

	}

	public function update(Request $request, $id) {

		$validator = $this -> validRequest( $request -> all( ) , $this -> getRequest( ) -> update( ) -> rules( ) );

		if ( ! $validator -> check ) return $validator ;
		else $sanitize = $validator -> body ;

		Event::fire('DummyClass.update.before' );

		$update = DummyClassModel::find( $id ) -> update( $sanitize );

		Event::fire('DummyClass.update.after', $update);

		$this -> code	= 200	;
		$this -> check	= true	;
		$this -> title	= 'update successful' ;
		$this -> message= __( 'update successful' );
		$this -> body	= $update ;

		return $this -> response( );

	}

	public function destroy( $id ) {

		$validator = $this -> validRequest( $request -> all( ) , $this -> getRequest( ) -> destroy( ) -> rules( ) );

		if ( ! $validator -> check ) return $validator ;
		else $sanitize = $validator -> body ;

		Event::fire('DummyClass.destroy.before' );

		$destroy = DummyClassModel::find( $id ) -> SoftDeletes(  );

		Event::fire('DummyClass.destroy.after', $destroy);

		$this -> code	= 200	;
		$this -> check	= true	;
		$this -> title	= 'destroy successful' ;
		$this -> message= __( 'destroy successful' );
		$this -> body	= $destroy ;

		return $this -> response( );

	}

}


